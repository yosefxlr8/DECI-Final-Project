Rules:
-I made my own rules to determine the strengh of a password
-I made it so that we have 5 different categories that depends on the rules
that the password meets.
-The rules were:
    length = 12-14 characters long
    include capital letters
    include numbers (digits)
    include special characters: 
        !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
-The different categories are:
    1-Completely unvalid due to:
        -starting the password with a number (a digit)
        -including unicode characters (ex: emojis) 
        -not including ascii lower or uppercase characters -> [a-zA-Z]
    2-Weak password:
        -due to the small length: less than 12 characters
    3-Medium strength password:
        -a size of 12-14 but the absence of any digits, caps or special characters
    4-Strong password:
        -meeting the right length and meeting one of the other rules:
            ex: 'jc87c0rstnlq3e' is a strong password as it meets 2 requirements; length and digits
    5-Unbreakable password (it's breakable with brute force theoretically but would be much harder)
        -A password that meets all the rules

Implementation:
-I first created a library that uses classes to make a Password object and a PasswordGenerator object that is used in the first part of the project part B